{
  "ptf": {
    "prefix": "ptf",
    "body": [
      "part '${TM_FILENAME_BASE}.freezed.dart';"
    ],
    "description": "part .freezed"
  },
  "ptg": {
    "prefix": "ptg",
    "body": [
      "part '${TM_FILENAME_BASE}.g.dart';"
    ],
    "description": "part .g"
  },
  "ptfg": {
    "prefix": "ptfg",
    "body": [
      "part '${TM_FILENAME_BASE}.freezed.dart';",
      "part '${TM_FILENAME_BASE}.g.dart';"
    ],
    "description": "part .g"
  },
  "funioncl": {
    "prefix": "funioncl",
    "body": [
      "",
      "@freezed",
      "class ${1} with _$${1}{",
      "  const factory ${1}.data() = _Data;",
      "}"
    ],
    "description": "Freezed Union"
  },
  "fdatacl": {
    "prefix": "fdatacl",
    "body": [
      "",
      "@freezed",
      "class ${1} with _$${1}{",
      "  const factory ${1}(${0}) = _${1};",
      "}"
    ],
    "description": "Freezed Union"
  },
  "fjson": {
    "prefix": "fjson",
    "body": [
      "factory ${0}.fromJson(Map<String, dynamic> json) =>_$${0}FromJson(json);"
    ],
    "description": "from json"
  },
  "ftestf": {
    "prefix": "ftestf",
    "body": [
      "import 'package:flutter_test/flutter_test.dart';",
      "import 'package:mocktail/mocktail.dart';",
      "",
      "void main() {",
      "setUp((){",
      "});",
      "",
      "  group('${1}', () {",
      "    test('${2}', () async {",
      "      ${0}",
      "    });",
      "  });",
      "}"
    ]
  },
  "ftestfm": {
    "prefix": "ftestfm",
    "body": [
      "import 'package:flutter_test/flutter_test.dart';",
      "import 'package:mocktail/mocktail.dart';",
      "",
      "void main() {",
      "setUp((){",
      "});",
      "",
      "tearDown(resetMocktailState);",
      "",
      "  group('${1}', () {",
      "    test('${2}', () async {",
      "      ${0}",
      "    });",
      "  });",
      "}"
    ]
  },
  "dtestfm": {
    "prefix": "dtestfm",
    "body": [
      "import 'package:test/test.dart';",
      "import 'package:mocktail/mocktail.dart';",
      "",
      "void main() {",
      "",
      "tearDown(resetMocktailState);",
      "",
      "  group('${1}', () {",
      "    test('${2}', () async {",
      "      ${0}",
      "    });",
      "  });",
      "}"
    ]
  },
  "dtestf": {
    "prefix": "dtestf",
    "body": [
      "import 'package:test/test.dart';",
      "",
      "void main() {",
      "",
      "",
      "  group('${1}', () {",
      "    test('${2}', () async {",
      "      ${0}",
      "    });",
      "  });",
      "}"
    ]
  },
  "clhw": {
    "prefix": "clhw",
    "body": [
      "",
      "class ${1} extends HookConsumerWidget {",
      "\tconst ${1}({Key? key}):super(key:key);",
      "",
      "\t@override",
      "\tWidget build(BuildContext context, WidgetRef ref) {",
      "\treturn\t${0};",
      "\t}",
      "}"
    ],
    "description": "Hook Widget File"
  },
  "clsw": {
    "prefix": "clsw",
    "body": [
      "",
      "class ${1} extends StatelessWidget {",
      "\tconst ${1}({Key? key}):super(key:key);",
      "",
      "\t@override",
      "\tWidget build(BuildContext context) {",
      "\treturn\t${0};",
      "\t}",
      "}"
    ],
    "description": "StatelessWidget"
  },
  "clsa": {
    "prefix": "clsa",
    "body": [
      "",
      "abstract class ${1} {",
      "",
      "\t${0}",
      "}"
    ],
    "description": "Abstraction"
  },
  "clsi": {
    "prefix": "clsi",
    "body": [
      "",
      "class ${1} implements ${2}{",
      "",
      "\t${0}",
      "}"
    ],
    "description": "Implementation"
  },
  "clop": {
    "prefix": "clop",
    "body": [
      "",
      "class ${1}Operation {",
      "",
      "\t${0}",
      "}"
    ],
    "description": "Implementation"
  },
  "clpl": {
    "prefix": "clus",
    "body": [
      "",
      "class ${1}UseCase {",
      "",
      "\tvoid execute() {",
      "\t${0}",
      "\t}",
      "}"
    ],
    "description": "UseCase"
  },
  "clcon": {
    "prefix": "clcon",
    "body": [
      "final ${1}Controller = StateNotifierProvider.autoDispose<${1}Controller, ${2}>((ref) => ${1}Controller(),);",
      "",
      "class ${1}Controller extends StateNotifier<${2}> {",
      "",
      "\t${0}",
      "}"
    ],
    "description": "Controller"
  }
}
